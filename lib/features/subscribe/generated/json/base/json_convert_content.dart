// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;

import '../../../bean/bindtelegram_entity.dart';
import '../../../bean/clash_config_entity.dart';
import '../../../bean/clash_log_entity.dart';
import '../../../bean/corpus_entity.dart';
import '../../../bean/coupon_entity.dart';
import '../../../bean/error_message_entity.dart';
import '../../../bean/guest_comm_config_entity.dart';
import '../../../bean/invite_fetch_entity_entity.dart';
import '../../../bean/no_sub_scribe_entity.dart';
import '../../../bean/notice_entity.dart';
import '../../../bean/order_detail_entity.dart';
import '../../../bean/payment_entity.dart';
import '../../../bean/payment_method_entity.dart';
import '../../../bean/plan_entity.dart';
import '../../../bean/server_entity.dart';
import '../../../bean/siteurl_entity.dart';
import '../../../bean/sub_scribe_entity.dart';
import '../../../bean/user_comm_config_entity.dart';
import '../../../bean/user_info_entity.dart';

import '../../../bean/auth_login_entity.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(
    Object error, StackTrace stackTrace);

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value
          .map((dynamic e) => _asT<T>(e, enumConvert: enumConvert))
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>)
          .map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)!)
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        return convertFuncMap[type]!(value as Map<String, dynamic>) as T;
      } else {
        throw UnimplementedError(
            '$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<AuthLoginEntity>[] is M) {
      return data
          .map<AuthLoginEntity>(
              (Map<String, dynamic> e) => AuthLoginEntity.fromJson(e))
          .toList() as M;
    }
    if (<BindtelegramEntity>[] is M) {
      return data
          .map<BindtelegramEntity>(
              (Map<String, dynamic> e) => BindtelegramEntity.fromJson(e))
          .toList() as M;
    }
    if (<ClashConfigEntity>[] is M) {
      return data
          .map<ClashConfigEntity>(
              (Map<String, dynamic> e) => ClashConfigEntity.fromJson(e))
          .toList() as M;
    }
    if (<ClashLogEntity>[] is M) {
      return data
          .map<ClashLogEntity>(
              (Map<String, dynamic> e) => ClashLogEntity.fromJson(e))
          .toList() as M;
    }
    if (<CorpusEntity>[] is M) {
      return data
          .map<CorpusEntity>(
              (Map<String, dynamic> e) => CorpusEntity.fromJson(e))
          .toList() as M;
    }
    if (<CouponEntity>[] is M) {
      return data
          .map<CouponEntity>(
              (Map<String, dynamic> e) => CouponEntity.fromJson(e))
          .toList() as M;
    }
    if (<ErrorMessageEntity>[] is M) {
      return data
          .map<ErrorMessageEntity>(
              (Map<String, dynamic> e) => ErrorMessageEntity.fromJson(e))
          .toList() as M;
    }
    if (<ErrorMessageErrors>[] is M) {
      return data
          .map<ErrorMessageErrors>(
              (Map<String, dynamic> e) => ErrorMessageErrors.fromJson(e))
          .toList() as M;
    }
    if (<GuestCommConfigEntity>[] is M) {
      return data
          .map<GuestCommConfigEntity>(
              (Map<String, dynamic> e) => GuestCommConfigEntity.fromJson(e))
          .toList() as M;
    }
    if (<InviteFetchEntityEntity>[] is M) {
      return data
          .map<InviteFetchEntityEntity>(
              (Map<String, dynamic> e) => InviteFetchEntityEntity.fromJson(e))
          .toList() as M;
    }
    if (<InviteFetchEntityCodes>[] is M) {
      return data
          .map<InviteFetchEntityCodes>(
              (Map<String, dynamic> e) => InviteFetchEntityCodes.fromJson(e))
          .toList() as M;
    }
    if (<NoSubScribeEntity>[] is M) {
      return data
          .map<NoSubScribeEntity>(
              (Map<String, dynamic> e) => NoSubScribeEntity.fromJson(e))
          .toList() as M;
    }
    if (<NoticeEntity>[] is M) {
      return data
          .map<NoticeEntity>(
              (Map<String, dynamic> e) => NoticeEntity.fromJson(e))
          .toList() as M;
    }
    if (<OrderDetailEntity>[] is M) {
      return data
          .map<OrderDetailEntity>(
              (Map<String, dynamic> e) => OrderDetailEntity.fromJson(e))
          .toList() as M;
    }
    if (<OrderDetailPlan>[] is M) {
      return data
          .map<OrderDetailPlan>(
              (Map<String, dynamic> e) => OrderDetailPlan.fromJson(e))
          .toList() as M;
    }
    if (<PaymentEntity>[] is M) {
      return data
          .map<PaymentEntity>(
              (Map<String, dynamic> e) => PaymentEntity.fromJson(e))
          .toList() as M;
    }
    if (<PaymentMethodEntity>[] is M) {
      return data
          .map<PaymentMethodEntity>(
              (Map<String, dynamic> e) => PaymentMethodEntity.fromJson(e))
          .toList() as M;
    }
    if (<PlanEntity>[] is M) {
      return data
          .map<PlanEntity>((Map<String, dynamic> e) => PlanEntity.fromJson(e))
          .toList() as M;
    }
    if (<ServerEntity>[] is M) {
      return data
          .map<ServerEntity>(
              (Map<String, dynamic> e) => ServerEntity.fromJson(e))
          .toList() as M;
    }
    if (<SiteurlEntity>[] is M) {
      return data
          .map<SiteurlEntity>(
              (Map<String, dynamic> e) => SiteurlEntity.fromJson(e))
          .toList() as M;
    }
    if (<SubScribeEntity>[] is M) {
      return data
          .map<SubScribeEntity>(
              (Map<String, dynamic> e) => SubScribeEntity.fromJson(e))
          .toList() as M;
    }
    if (<SubScribePlan>[] is M) {
      return data
          .map<SubScribePlan>(
              (Map<String, dynamic> e) => SubScribePlan.fromJson(e))
          .toList() as M;
    }
    if (<UserCommConfigEntity>[] is M) {
      return data
          .map<UserCommConfigEntity>(
              (Map<String, dynamic> e) => UserCommConfigEntity.fromJson(e))
          .toList() as M;
    }
    if (<UserInfoEntity>[] is M) {
      return data
          .map<UserInfoEntity>(
              (Map<String, dynamic> e) => UserInfoEntity.fromJson(e))
          .toList() as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(
          json.map((dynamic e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (AuthLoginEntity).toString(): AuthLoginEntity.fromJson,
    (BindtelegramEntity).toString(): BindtelegramEntity.fromJson,
    (ClashConfigEntity).toString(): ClashConfigEntity.fromJson,
    (ClashLogEntity).toString(): ClashLogEntity.fromJson,
    (CorpusEntity).toString(): CorpusEntity.fromJson,
    (CouponEntity).toString(): CouponEntity.fromJson,
    (ErrorMessageEntity).toString(): ErrorMessageEntity.fromJson,
    (ErrorMessageErrors).toString(): ErrorMessageErrors.fromJson,
    (GuestCommConfigEntity).toString(): GuestCommConfigEntity.fromJson,
    (InviteFetchEntityEntity).toString(): InviteFetchEntityEntity.fromJson,
    (InviteFetchEntityCodes).toString(): InviteFetchEntityCodes.fromJson,
    (NoSubScribeEntity).toString(): NoSubScribeEntity.fromJson,
    (NoticeEntity).toString(): NoticeEntity.fromJson,
    (OrderDetailEntity).toString(): OrderDetailEntity.fromJson,
    (OrderDetailPlan).toString(): OrderDetailPlan.fromJson,
    (PaymentEntity).toString(): PaymentEntity.fromJson,
    (PaymentMethodEntity).toString(): PaymentMethodEntity.fromJson,
    (PlanEntity).toString(): PlanEntity.fromJson,
    (ServerEntity).toString(): ServerEntity.fromJson,
    (SiteurlEntity).toString(): SiteurlEntity.fromJson,
    (SubScribeEntity).toString(): SubScribeEntity.fromJson,
    (SubScribePlan).toString(): SubScribePlan.fromJson,
    (UserCommConfigEntity).toString(): UserCommConfigEntity.fromJson,
    (UserInfoEntity).toString(): UserInfoEntity.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}
